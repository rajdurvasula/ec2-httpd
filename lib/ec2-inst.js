"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2Inst = void 0;
const cdk = require("aws-cdk-lib");
const constructs_1 = require("constructs");
const iam = require("aws-cdk-lib/aws-iam");
const ec2 = require("aws-cdk-lib/aws-ec2");
const aws_s3_assets_1 = require("aws-cdk-lib/aws-s3-assets");
const path = require("path");
class Ec2Inst extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // create vpc
        const vpc = new ec2.Vpc(this, 'sample-vpc', {
            cidr: '192.168.0.0/16',
            natGateways: 0,
            subnetConfiguration: [
                {
                    cidrMask: 24,
                    name: 'sample-vpc',
                    subnetType: ec2.SubnetType.PUBLIC
                }
            ]
        });
        // Allow SSH
        const securityGroup = new ec2.SecurityGroup(this, 'sample-sg', {
            vpc,
            description: 'Security Group for sample-vpc',
            allowAllOutbound: true
        });
        securityGroup.addIngressRule(ec2.Peer.ipv4(props.inboundCidr), ec2.Port.tcp(22), 'Allow SSH');
        // Role for EC2 instance
        const ec2Role = new iam.Role(this, 'ec2-role', {
            assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),
            description: 'Role for EC2 instance'
        });
        ec2Role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSSMManagedInstanceCore'));
        ec2Role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSSMReadOnlyAccess'));
        const accountId = cdk.Stack.of(this).account;
        const region = cdk.Stack.of(this).region;
        // Use latest Amazon Linux 2 AMI
        const ami = new ec2.AmazonLinuxImage({
            generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
            cpuType: ec2.AmazonLinuxCpuType.X86_64
        });
        this.ec2Instance = new ec2.Instance(this, 'sample-inst', {
            vpc,
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
            keyName: props.keyPair,
            machineImage: ami,
            securityGroup: securityGroup,
            role: ec2Role
        });
        // Create Asset for User Data
        const asset = new aws_s3_assets_1.Asset(this, 'user-data-asset', {
            path: path.join(__dirname, '../src/config.sh')
        });
        const localPath = this.ec2Instance.userData.addS3DownloadCommand({
            bucket: asset.bucket,
            bucketKey: asset.s3ObjectKey
        });
        this.ec2Instance.userData.addExecuteFileCommand({
            filePath: localPath,
            arguments: '--verbose -y'
        });
        asset.grantRead(this.ec2Instance.role);
    }
}
exports.Ec2Inst = Ec2Inst;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMyLWluc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlYzItaW5zdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFDbkMsMkNBQXVDO0FBQ3ZDLDJDQUEyQztBQUMzQywyQ0FBMkM7QUFDM0MsNkRBQWtEO0FBQ2xELDZCQUE2QjtBQU83QixNQUFhLE9BQVEsU0FBUSxzQkFBUztJQUlsQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXdCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsYUFBYTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQ3hDLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsV0FBVyxFQUFFLENBQUM7WUFDZCxtQkFBbUIsRUFBRTtnQkFDakI7b0JBQ0ksUUFBUSxFQUFFLEVBQUU7b0JBQ1osSUFBSSxFQUFFLFlBQVk7b0JBQ2xCLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU07aUJBQ3BDO2FBQ0o7U0FDSixDQUFDLENBQUM7UUFFSCxZQUFZO1FBQ1osTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7WUFDM0QsR0FBRztZQUNILFdBQVcsRUFBRSwrQkFBK0I7WUFDNUMsZ0JBQWdCLEVBQUUsSUFBSTtTQUN6QixDQUFDLENBQUM7UUFDSCxhQUFhLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5Rix3QkFBd0I7UUFDeEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDM0MsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDO1lBQ3hELFdBQVcsRUFBRSx1QkFBdUI7U0FDdkMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO1FBQ3JHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQztRQUVoRyxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDN0MsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBRXpDLGdDQUFnQztRQUNoQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztZQUNqQyxVQUFVLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLGNBQWM7WUFDcEQsT0FBTyxFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNO1NBQ3pDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7WUFDckQsR0FBRztZQUNILFlBQVksRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztZQUMvRSxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsWUFBWSxFQUFFLEdBQUc7WUFDakIsYUFBYSxFQUFFLGFBQWE7WUFDNUIsSUFBSSxFQUFFLE9BQU87U0FDaEIsQ0FBQyxDQUFDO1FBRUgsNkJBQTZCO1FBQzdCLE1BQU0sS0FBSyxHQUFHLElBQUkscUJBQUssQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7WUFDN0MsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDO1NBQ2pELENBQUMsQ0FBQztRQUVILE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDO1lBQzdELE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVc7U0FDL0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDNUMsUUFBUSxFQUFFLFNBQVM7WUFDbkIsU0FBUyxFQUFFLGNBQWM7U0FDNUIsQ0FBQyxDQUFDO1FBQ0gsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNDLENBQUM7Q0FDSjtBQXRFRCwwQkFzRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgeyBBc3NldCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMy1hc3NldHMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuZXhwb3J0IGludGVyZmFjZSBFYzJJbnN0U3RhY2tQcm9wcyB7XG4gICAgaW5ib3VuZENpZHI6IHN0cmluZztcbiAgICBrZXlQYWlyOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBFYzJJbnN0IGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgICBcbiAgICBwdWJsaWMgcmVhZG9ubHkgZWMySW5zdGFuY2U6IGVjMi5JbnN0YW5jZTtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRWMySW5zdFN0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgXG4gICAgICAgIC8vIGNyZWF0ZSB2cGNcbiAgICAgICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGModGhpcywgJ3NhbXBsZS12cGMnLCB7XG4gICAgICAgICAgICBjaWRyOiAnMTkyLjE2OC4wLjAvMTYnLFxuICAgICAgICAgICAgbmF0R2F0ZXdheXM6IDAsXG4gICAgICAgICAgICBzdWJuZXRDb25maWd1cmF0aW9uOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjaWRyTWFzazogMjQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzYW1wbGUtdnBjJyxcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFVCTElDXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFsbG93IFNTSFxuICAgICAgICBjb25zdCBzZWN1cml0eUdyb3VwID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHRoaXMsICdzYW1wbGUtc2cnLCB7XG4gICAgICAgICAgICB2cGMsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IEdyb3VwIGZvciBzYW1wbGUtdnBjJyxcbiAgICAgICAgICAgIGFsbG93QWxsT3V0Ym91bmQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHNlY3VyaXR5R3JvdXAuYWRkSW5ncmVzc1J1bGUoZWMyLlBlZXIuaXB2NChwcm9wcy5pbmJvdW5kQ2lkciksIGVjMi5Qb3J0LnRjcCgyMiksICdBbGxvdyBTU0gnKTtcbiAgICAgICAgLy8gUm9sZSBmb3IgRUMyIGluc3RhbmNlXG4gICAgICAgIGNvbnN0IGVjMlJvbGUgPSBuZXcgaWFtLlJvbGUodGhpcywgJ2VjMi1yb2xlJywge1xuICAgICAgICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2VjMi5hbWF6b25hd3MuY29tJyksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JvbGUgZm9yIEVDMiBpbnN0YW5jZSdcbiAgICAgICAgfSk7XG4gICAgICAgIGVjMlJvbGUuYWRkTWFuYWdlZFBvbGljeShpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ0FtYXpvblNTTU1hbmFnZWRJbnN0YW5jZUNvcmUnKSk7XG4gICAgICAgIGVjMlJvbGUuYWRkTWFuYWdlZFBvbGljeShpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ0FtYXpvblNTTVJlYWRPbmx5QWNjZXNzJykpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYWNjb3VudElkID0gY2RrLlN0YWNrLm9mKHRoaXMpLmFjY291bnQ7XG4gICAgICAgIGNvbnN0IHJlZ2lvbiA9IGNkay5TdGFjay5vZih0aGlzKS5yZWdpb247XG4gICAgICAgIFxuICAgICAgICAvLyBVc2UgbGF0ZXN0IEFtYXpvbiBMaW51eCAyIEFNSVxuICAgICAgICBjb25zdCBhbWkgPSBuZXcgZWMyLkFtYXpvbkxpbnV4SW1hZ2Uoe1xuICAgICAgICAgICAgZ2VuZXJhdGlvbjogZWMyLkFtYXpvbkxpbnV4R2VuZXJhdGlvbi5BTUFaT05fTElOVVhfMixcbiAgICAgICAgICAgIGNwdVR5cGU6IGVjMi5BbWF6b25MaW51eENwdVR5cGUuWDg2XzY0XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5lYzJJbnN0YW5jZSA9IG5ldyBlYzIuSW5zdGFuY2UodGhpcywgJ3NhbXBsZS1pbnN0Jywge1xuICAgICAgICAgICAgdnBjLFxuICAgICAgICAgICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLlQyLCBlYzIuSW5zdGFuY2VTaXplLk1JQ1JPKSxcbiAgICAgICAgICAgIGtleU5hbWU6IHByb3BzLmtleVBhaXIsXG4gICAgICAgICAgICBtYWNoaW5lSW1hZ2U6IGFtaSxcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXA6IHNlY3VyaXR5R3JvdXAsXG4gICAgICAgICAgICByb2xlOiBlYzJSb2xlXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXRlIEFzc2V0IGZvciBVc2VyIERhdGFcbiAgICAgICAgY29uc3QgYXNzZXQgPSBuZXcgQXNzZXQodGhpcywgJ3VzZXItZGF0YS1hc3NldCcsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9zcmMvY29uZmlnLnNoJylcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBsb2NhbFBhdGggPSB0aGlzLmVjMkluc3RhbmNlLnVzZXJEYXRhLmFkZFMzRG93bmxvYWRDb21tYW5kKHtcbiAgICAgICAgICAgIGJ1Y2tldDogYXNzZXQuYnVja2V0LFxuICAgICAgICAgICAgYnVja2V0S2V5OiBhc3NldC5zM09iamVjdEtleVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZWMySW5zdGFuY2UudXNlckRhdGEuYWRkRXhlY3V0ZUZpbGVDb21tYW5kKHtcbiAgICAgICAgICAgIGZpbGVQYXRoOiBsb2NhbFBhdGgsXG4gICAgICAgICAgICBhcmd1bWVudHM6ICctLXZlcmJvc2UgLXknXG4gICAgICAgIH0pO1xuICAgICAgICBhc3NldC5ncmFudFJlYWQodGhpcy5lYzJJbnN0YW5jZS5yb2xlKTtcbiAgICAgICAgXG4gICAgfVxufSJdfQ==